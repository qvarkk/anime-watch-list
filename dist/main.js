/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("class Anime {\r\n  constructor(title, status, epWatched, epAll, notes) {\r\n    this.title = title;\r\n    this.status = status;\r\n    this.epWatched = epWatched;\r\n    this.epAll = epAll;\r\n    this.notes = notes;\r\n  }\r\n}\r\nlet myList = [];\r\n\r\nconst animeCard = document.querySelector(\"#feed\");\r\nanimeCard.remove();\r\nanimeCard.removeAttribute(\"id\");\r\n\r\n//#region DOM_actions\r\n\r\nfunction createGridCard(name, status, epN, epA, notes) {\r\n  const cardsGrid = document.querySelector(\"#titlesGrid\");\r\n\r\n  let newCard = animeCard.cloneNode(true);\r\n  cardsGrid.insertBefore(\r\n    newCard,\r\n    document.querySelector(\".title-card\")\r\n  );\r\n\r\n  let statusDiv = newCard.querySelector(\"#statusDiv\");\r\n  let statusPara = newCard.querySelector(\"#statusPara\");\r\n  let namePara = newCard.querySelector(\"#titlePara\");\r\n  let epPara = newCard.querySelector(\"#epPara\");\r\n  let notesPara = newCard.querySelector(\"#notesPara\");\r\n\r\n  switch (status) {\r\n    case \"hold\":\r\n      statusPara.textContent = \"On Hold\";\r\n      statusDiv.classList.add(\"hold\");\r\n      statusDiv.classList.remove(\"watch\");\r\n      statusDiv.classList.remove(\"fin\");\r\n      break;\r\n    case \"watch\":\r\n      statusPara.textContent = \"Watching\";\r\n      statusDiv.classList.add(\"watch\");\r\n      statusDiv.classList.remove(\"hold\");\r\n      statusDiv.classList.remove(\"fin\");\r\n      break;\r\n    case \"fin\":\r\n      statusPara.textContent = \"Finished\";\r\n      statusDiv.classList.add(\"fin\");\r\n      statusDiv.classList.remove(\"hold\");\r\n      statusDiv.classList.remove(\"watch\");\r\n      break;\r\n  }\r\n\r\n  namePara.textContent = name;\r\n  epPara.textContent = `${epN}/${epA} Ep`;\r\n  notesPara.textContent = notes;\r\n}\r\n\r\nfunction refreshButtonsActions() {\r\n  let cards = document.querySelectorAll(\".title-card\");\r\n\r\n  let i = 0;\r\n  for (card of cards) {\r\n    let epBtn = card.querySelector(\"#addEpBtn\");\r\n    let holdBtn = card.querySelector(\"#switchHoldBtn\");\r\n    let removeBtn = card.querySelector(\"#remTitleBtn\");\r\n    let index = myList.length - i - 1;\r\n\r\n    epBtn.addEventListener(\"click\", () => {\r\n      if (myList[index].epWatched >= myList[index].epAll) {\r\n        return;\r\n      } else {\r\n        myList[index].epWatched = parseInt(myList[index].epWatched) + 1;\r\n        if (myList[index].epWatched == myList[index].epAll) {\r\n          myList[index].status = \"fin\";\r\n        }\r\n        saveList();\r\n        reloadCardsGrid();\r\n      }\r\n    });\r\n\r\n    holdBtn.addEventListener(\"click\", () => {\r\n      switch (myList[index].status) {\r\n        case \"fin\":\r\n          return;\r\n        case \"watch\":\r\n          myList[index].status = \"hold\";\r\n          break;\r\n        case \"hold\":\r\n          myList[index].status = \"watch\";\r\n          break;\r\n      }\r\n      saveList();\r\n      reloadCardsGrid();\r\n    });\r\n\r\n    removeBtn.addEventListener(\"click\", () => {\r\n      card.remove();\r\n      myList.splice(index, 1);\r\n      saveList();\r\n      reloadCardsGrid();\r\n    });\r\n\r\n    i++;\r\n  }\r\n}\r\n\r\nfunction reloadCardsGrid() {\r\n  let allCards = document.querySelectorAll(\".title-card\");\r\n  for (card of allCards) {\r\n    card.remove();\r\n  }\r\n  for (anime of myList) {\r\n    createGridCard(\r\n      anime.title,\r\n      anime.status,\r\n      anime.epWatched,\r\n      anime.epAll,\r\n      anime.notes\r\n    );\r\n  }\r\n  refreshButtonsActions();\r\n}\r\n\r\nfunction addAnimeToList() {\r\n  let status;\r\n  if (epNowFormInput.value === epAllFormInput.value) {\r\n    status = \"fin\";\r\n  } else if (watchingFormInput.checked === true) {\r\n    status = \"watch\";\r\n  } else {\r\n    status = \"hold\";\r\n  }\r\n  let newAnime = new Anime(\r\n    nameFormInput.value,\r\n    status,\r\n    epNowFormInput.value,\r\n    epAllFormInput.value,\r\n    notesFormInput.value\r\n  );\r\n  myList.push(newAnime);\r\n  saveList();\r\n  reloadCardsGrid();\r\n}\r\n\r\n//#endregion\r\n\r\n//#region form_actions\r\n\r\nconst addAnimeBtn = document.querySelector(\"#addTitleBtn\");\r\nconst addAnimeModal = document.querySelector(\"#modal\");\r\nconst overlay = document.querySelector(\"#overlay\");\r\n\r\nconst addAnimeForm = document.querySelector(\"#addTitleForm\");\r\nconst nameFormInput = document.querySelector(\"#nameFormInput\");\r\nconst epNowFormInput = document.querySelector(\"#epNowFormInput\");\r\nconst epAllFormInput = document.querySelector(\"#epAllFormInput\");\r\nconst notesFormInput = document.querySelector(\"#notesFormInput\");\r\nconst watchingFormInput = document.querySelector(\"#watchingFormInput\");\r\nconst submitFormBtn = document.querySelector(\"#submitTitleButton\");\r\n\r\n// Modal and form functions for events\r\nfunction addAnime() {\r\n  addAnimeForm.reset();\r\n  addAnimeModal.classList.remove(\"inactive\");\r\n  overlay.classList.remove(\"inactive\");\r\n}\r\n\r\nfunction closeOverlay() {\r\n  addAnimeModal.classList.add(\"inactive\");\r\n  overlay.classList.add(\"inactive\");\r\n}\r\n\r\nfunction submitNewAnime(e) {\r\n  e.preventDefault();\r\n  addAnimeToList();\r\n  addAnimeModal.classList.add(\"inactive\");\r\n  overlay.classList.add(\"inactive\");\r\n}\r\n\r\naddAnimeBtn.onclick = addAnime;\r\noverlay.onclick = closeOverlay;\r\naddAnimeForm.onsubmit = submitNewAnime;\r\n\r\n//#endregion\r\n\r\n//#region localstorage_actions\r\n\r\nfunction saveList() {\r\n  let jStr = JSON.stringify(myList);\r\n  localStorage.setItem(\"list\", jStr);\r\n}\r\n\r\nfunction loadList() {\r\n  if (localStorage.getItem(\"list\") != null) {\r\n    myList = JSON.parse(localStorage.getItem(\"list\"));\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\nloadList();\r\nreloadCardsGrid();\n\n//# sourceURL=webpack://anime-watch-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;